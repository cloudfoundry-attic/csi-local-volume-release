// Code generated by protoc-gen-go. DO NOT EDIT.
// source: csi-local-volume-release.proto

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	csi-local-volume-release.proto

It has these top-level messages:
	CreateVolumeRequest
	CreateVolumeResponse
	DeleteVolumeRequest
	DeleteVolumeResponse
	VolumeCapability
	CapacityRange
	VolumeInfo
	AccessMode
	VolumeID
	VolumeMetadata
	Version
	Error
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccessMode_Mode int32

const (
	AccessMode_UNKNOWN AccessMode_Mode = 0
	// Can be published as read/write at one node at a time.
	AccessMode_SINGLE_NODE_WRITER AccessMode_Mode = 1
	// Can be published as readonly at one node at a time.
	AccessMode_SINGLE_NODE_READER_ONLY AccessMode_Mode = 2
	// Can be published as readonly at multiple nodes simultaneously.
	AccessMode_MULTI_NODE_READER_ONLY AccessMode_Mode = 3
	// Can be published at multiple nodes simultaneously. Only one of
	// the node can be used as read/write. The rest will be readonly.
	AccessMode_MULTI_NODE_SINGLE_WRITER AccessMode_Mode = 4
	// Can be published as read/write at multiple nodes simultaneously.
	AccessMode_MULTI_NODE_MULTI_WRITER AccessMode_Mode = 5
)

var AccessMode_Mode_name = map[int32]string{
	0: "UNKNOWN",
	1: "SINGLE_NODE_WRITER",
	2: "SINGLE_NODE_READER_ONLY",
	3: "MULTI_NODE_READER_ONLY",
	4: "MULTI_NODE_SINGLE_WRITER",
	5: "MULTI_NODE_MULTI_WRITER",
}
var AccessMode_Mode_value = map[string]int32{
	"UNKNOWN":                  0,
	"SINGLE_NODE_WRITER":       1,
	"SINGLE_NODE_READER_ONLY":  2,
	"MULTI_NODE_READER_ONLY":   3,
	"MULTI_NODE_SINGLE_WRITER": 4,
	"MULTI_NODE_MULTI_WRITER":  5,
}

func (x AccessMode_Mode) Enum() *AccessMode_Mode {
	p := new(AccessMode_Mode)
	*p = x
	return p
}
func (x AccessMode_Mode) String() string {
	return proto.EnumName(AccessMode_Mode_name, int32(x))
}
func (x *AccessMode_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccessMode_Mode_value, data, "AccessMode_Mode")
	if err != nil {
		return err
	}
	*x = AccessMode_Mode(value)
	return nil
}
func (AccessMode_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type CreateVolumeRequest struct {
	// The API version assumed by the CO. This field is REQUIRED.
	Version *Version `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	// The suggested name for the storage space. This field is REQUIRED.
	// It serves two purposes:
	// 1) Idempotency - This name is generated by the CO to achieve
	//    idempotency. If `CreateVolume` fails, the volume may or may not
	//    be provisioned. In this case, the CO may call `CreateVolume`
	//    again, with the same name, to ensure the volume exists. The
	//    Plugin should ensure that multiple `CreateVolume` calls for the
	//    same name do not result in more than one piece of storage
	//    provisioned corresponding to that name. If a Plugin is unable to
	//    enforce idempotency, the COâ€™s error recovery logic could result
	//    in multiple (unused) volumes being provisioned.
	// 2) Suggested name - Some storage systems allow callers to specify
	//    an identifier by which to refer to the newly provisioned
	//    storage. If a storage system supports this, it can optionally
	//    use this name as the identifier for the new volume.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// This field is OPTIONAL. This allows the CO to specify the capacity
	// requirement of the volume to be provisioned. If not specified, the
	// Plugin MAY choose an implementation-defined capacity range.
	CapacityRange *CapacityRange `protobuf:"bytes,3,opt,name=capacity_range" json:"capacity_range,omitempty"`
	// The capabilities that the provisioned volume MUST have: the Plugin
	// MUST provision a volume that could satisfy ANY ONE of the
	// capabilities specified in this list. The Plugin MUST assume that
	// the CO MAY use the  provisioned volume later with ANY of the
	// capabilities specified in this list. This also enables the CO to do
	// early validation: if ANY of the specified volume capabilities are
	// not supported by the Plugin, the call SHALL fail. This field is
	// REQUIRED.
	VolumeCapabilities []*VolumeCapability `protobuf:"bytes,4,rep,name=volume_capabilities" json:"volume_capabilities,omitempty"`
	// Plugin specific parameters passed in as opaque key-value pairs.
	// This field is OPTIONAL. The Plugin is responsible for parsing and
	// validating these parameters. COs will treat these as opaque.
	Parameters       map[string]string `protobuf:"bytes,5,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CreateVolumeRequest) Reset()                    { *m = CreateVolumeRequest{} }
func (m *CreateVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVolumeRequest) ProtoMessage()               {}
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateVolumeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CreateVolumeRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CreateVolumeRequest) GetCapacityRange() *CapacityRange {
	if m != nil {
		return m.CapacityRange
	}
	return nil
}

func (m *CreateVolumeRequest) GetVolumeCapabilities() []*VolumeCapability {
	if m != nil {
		return m.VolumeCapabilities
	}
	return nil
}

func (m *CreateVolumeRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type CreateVolumeResponse struct {
	// One of the following fields MUST be specified.
	//
	// Types that are valid to be assigned to Reply:
	//	*CreateVolumeResponse_Result_
	//	*CreateVolumeResponse_Error
	Reply            isCreateVolumeResponse_Reply `protobuf_oneof:"reply"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *CreateVolumeResponse) Reset()                    { *m = CreateVolumeResponse{} }
func (m *CreateVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVolumeResponse) ProtoMessage()               {}
func (*CreateVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isCreateVolumeResponse_Reply interface {
	isCreateVolumeResponse_Reply()
}

type CreateVolumeResponse_Result_ struct {
	Result *CreateVolumeResponse_Result `protobuf:"bytes,1,opt,name=result,oneof"`
}
type CreateVolumeResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*CreateVolumeResponse_Result_) isCreateVolumeResponse_Reply() {}
func (*CreateVolumeResponse_Error) isCreateVolumeResponse_Reply()   {}

func (m *CreateVolumeResponse) GetReply() isCreateVolumeResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *CreateVolumeResponse) GetResult() *CreateVolumeResponse_Result {
	if x, ok := m.GetReply().(*CreateVolumeResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (m *CreateVolumeResponse) GetError() *Error {
	if x, ok := m.GetReply().(*CreateVolumeResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateVolumeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateVolumeResponse_OneofMarshaler, _CreateVolumeResponse_OneofUnmarshaler, _CreateVolumeResponse_OneofSizer, []interface{}{
		(*CreateVolumeResponse_Result_)(nil),
		(*CreateVolumeResponse_Error)(nil),
	}
}

func _CreateVolumeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateVolumeResponse)
	// reply
	switch x := m.Reply.(type) {
	case *CreateVolumeResponse_Result_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Result); err != nil {
			return err
		}
	case *CreateVolumeResponse_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateVolumeResponse.Reply has unexpected type %T", x)
	}
	return nil
}

func _CreateVolumeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateVolumeResponse)
	switch tag {
	case 1: // reply.result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateVolumeResponse_Result)
		err := b.DecodeMessage(msg)
		m.Reply = &CreateVolumeResponse_Result_{msg}
		return true, err
	case 2: // reply.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Reply = &CreateVolumeResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateVolumeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateVolumeResponse)
	// reply
	switch x := m.Reply.(type) {
	case *CreateVolumeResponse_Result_:
		s := proto.Size(x.Result)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateVolumeResponse_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateVolumeResponse_Result struct {
	// Contains all attributes of the newly created volume that are
	// relevant to the CO along with information required by the Plugin
	// to uniquely identifying the volume. This field is REQUIRED.
	VolumeInfo       *VolumeInfo `protobuf:"bytes,1,req,name=volume_info" json:"volume_info,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CreateVolumeResponse_Result) Reset()                    { *m = CreateVolumeResponse_Result{} }
func (m *CreateVolumeResponse_Result) String() string            { return proto.CompactTextString(m) }
func (*CreateVolumeResponse_Result) ProtoMessage()               {}
func (*CreateVolumeResponse_Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *CreateVolumeResponse_Result) GetVolumeInfo() *VolumeInfo {
	if m != nil {
		return m.VolumeInfo
	}
	return nil
}

type DeleteVolumeRequest struct {
	// The API version assumed by the CO. This field is REQUIRED.
	Version *Version `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	// The ID of the volume to be deprovisioned. This field is REQUIRED.
	VolumeId *VolumeID `protobuf:"bytes,2,req,name=volume_id" json:"volume_id,omitempty"`
	// The metadata of the volume to be deprovisioned. This field is
	// OPTIONAL.
	VolumeMetadata   *VolumeMetadata `protobuf:"bytes,3,opt,name=volume_metadata" json:"volume_metadata,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DeleteVolumeRequest) Reset()                    { *m = DeleteVolumeRequest{} }
func (m *DeleteVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVolumeRequest) ProtoMessage()               {}
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteVolumeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *DeleteVolumeRequest) GetVolumeId() *VolumeID {
	if m != nil {
		return m.VolumeId
	}
	return nil
}

func (m *DeleteVolumeRequest) GetVolumeMetadata() *VolumeMetadata {
	if m != nil {
		return m.VolumeMetadata
	}
	return nil
}

type DeleteVolumeResponse struct {
	// One of the following fields MUST be specified.
	//
	// Types that are valid to be assigned to Reply:
	//	*DeleteVolumeResponse_Result_
	//	*DeleteVolumeResponse_Error
	Reply            isDeleteVolumeResponse_Reply `protobuf_oneof:"reply"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *DeleteVolumeResponse) Reset()                    { *m = DeleteVolumeResponse{} }
func (m *DeleteVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteVolumeResponse) ProtoMessage()               {}
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isDeleteVolumeResponse_Reply interface {
	isDeleteVolumeResponse_Reply()
}

type DeleteVolumeResponse_Result_ struct {
	Result *DeleteVolumeResponse_Result `protobuf:"bytes,1,opt,name=result,oneof"`
}
type DeleteVolumeResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*DeleteVolumeResponse_Result_) isDeleteVolumeResponse_Reply() {}
func (*DeleteVolumeResponse_Error) isDeleteVolumeResponse_Reply()   {}

func (m *DeleteVolumeResponse) GetReply() isDeleteVolumeResponse_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *DeleteVolumeResponse) GetResult() *DeleteVolumeResponse_Result {
	if x, ok := m.GetReply().(*DeleteVolumeResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (m *DeleteVolumeResponse) GetError() *Error {
	if x, ok := m.GetReply().(*DeleteVolumeResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeleteVolumeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeleteVolumeResponse_OneofMarshaler, _DeleteVolumeResponse_OneofUnmarshaler, _DeleteVolumeResponse_OneofSizer, []interface{}{
		(*DeleteVolumeResponse_Result_)(nil),
		(*DeleteVolumeResponse_Error)(nil),
	}
}

func _DeleteVolumeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeleteVolumeResponse)
	// reply
	switch x := m.Reply.(type) {
	case *DeleteVolumeResponse_Result_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Result); err != nil {
			return err
		}
	case *DeleteVolumeResponse_Error:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeleteVolumeResponse.Reply has unexpected type %T", x)
	}
	return nil
}

func _DeleteVolumeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeleteVolumeResponse)
	switch tag {
	case 1: // reply.result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteVolumeResponse_Result)
		err := b.DecodeMessage(msg)
		m.Reply = &DeleteVolumeResponse_Result_{msg}
		return true, err
	case 2: // reply.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Reply = &DeleteVolumeResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeleteVolumeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeleteVolumeResponse)
	// reply
	switch x := m.Reply.(type) {
	case *DeleteVolumeResponse_Result_:
		s := proto.Size(x.Result)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeleteVolumeResponse_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeleteVolumeResponse_Result struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeleteVolumeResponse_Result) Reset()                    { *m = DeleteVolumeResponse_Result{} }
func (m *DeleteVolumeResponse_Result) String() string            { return proto.CompactTextString(m) }
func (*DeleteVolumeResponse_Result) ProtoMessage()               {}
func (*DeleteVolumeResponse_Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// Specify a capability of a volume.
type VolumeCapability struct {
	// One of the following fields MUST be specified.
	//
	// Types that are valid to be assigned to Value:
	//	*VolumeCapability_Block
	//	*VolumeCapability_Mount
	Value            isVolumeCapability_Value `protobuf_oneof:"value"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *VolumeCapability) Reset()                    { *m = VolumeCapability{} }
func (m *VolumeCapability) String() string            { return proto.CompactTextString(m) }
func (*VolumeCapability) ProtoMessage()               {}
func (*VolumeCapability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isVolumeCapability_Value interface {
	isVolumeCapability_Value()
}

type VolumeCapability_Block struct {
	Block *VolumeCapability_BlockVolume `protobuf:"bytes,1,opt,name=block,oneof"`
}
type VolumeCapability_Mount struct {
	Mount *VolumeCapability_MountVolume `protobuf:"bytes,2,opt,name=mount,oneof"`
}

func (*VolumeCapability_Block) isVolumeCapability_Value() {}
func (*VolumeCapability_Mount) isVolumeCapability_Value() {}

func (m *VolumeCapability) GetValue() isVolumeCapability_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *VolumeCapability) GetBlock() *VolumeCapability_BlockVolume {
	if x, ok := m.GetValue().(*VolumeCapability_Block); ok {
		return x.Block
	}
	return nil
}

func (m *VolumeCapability) GetMount() *VolumeCapability_MountVolume {
	if x, ok := m.GetValue().(*VolumeCapability_Mount); ok {
		return x.Mount
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VolumeCapability) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VolumeCapability_OneofMarshaler, _VolumeCapability_OneofUnmarshaler, _VolumeCapability_OneofSizer, []interface{}{
		(*VolumeCapability_Block)(nil),
		(*VolumeCapability_Mount)(nil),
	}
}

func _VolumeCapability_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VolumeCapability)
	// value
	switch x := m.Value.(type) {
	case *VolumeCapability_Block:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *VolumeCapability_Mount:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mount); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VolumeCapability.Value has unexpected type %T", x)
	}
	return nil
}

func _VolumeCapability_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VolumeCapability)
	switch tag {
	case 1: // value.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VolumeCapability_BlockVolume)
		err := b.DecodeMessage(msg)
		m.Value = &VolumeCapability_Block{msg}
		return true, err
	case 2: // value.mount
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VolumeCapability_MountVolume)
		err := b.DecodeMessage(msg)
		m.Value = &VolumeCapability_Mount{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VolumeCapability_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VolumeCapability)
	// value
	switch x := m.Value.(type) {
	case *VolumeCapability_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VolumeCapability_Mount:
		s := proto.Size(x.Mount)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VolumeCapability_BlockVolume struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *VolumeCapability_BlockVolume) Reset()                    { *m = VolumeCapability_BlockVolume{} }
func (m *VolumeCapability_BlockVolume) String() string            { return proto.CompactTextString(m) }
func (*VolumeCapability_BlockVolume) ProtoMessage()               {}
func (*VolumeCapability_BlockVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type VolumeCapability_MountVolume struct {
	// The filesystem type. This field is OPTIONAL.
	FsType *string `protobuf:"bytes,1,opt,name=fs_type" json:"fs_type,omitempty"`
	// The mount options that can be used for the volume. This field is
	// OPTIONAL. `mount_flags` MAY contain sensitive information.
	// Therefore, the CO and the Plugin MUST NOT leak this information
	// to untrusted entities.
	MountFlags       []string `protobuf:"bytes,2,rep,name=mount_flags" json:"mount_flags,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *VolumeCapability_MountVolume) Reset()                    { *m = VolumeCapability_MountVolume{} }
func (m *VolumeCapability_MountVolume) String() string            { return proto.CompactTextString(m) }
func (*VolumeCapability_MountVolume) ProtoMessage()               {}
func (*VolumeCapability_MountVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

func (m *VolumeCapability_MountVolume) GetFsType() string {
	if m != nil && m.FsType != nil {
		return *m.FsType
	}
	return ""
}

func (m *VolumeCapability_MountVolume) GetMountFlags() []string {
	if m != nil {
		return m.MountFlags
	}
	return nil
}

// The capacity of the storage space in bytes. To specify an exact size,
// `required_bytes` and `limit_bytes` can be set to the same value. At
// least one of the these fields MUST be specified.
type CapacityRange struct {
	// Volume must be at least this big.
	RequiredBytes *uint64 `protobuf:"varint,1,opt,name=required_bytes" json:"required_bytes,omitempty"`
	// Volume must not be bigger than this.
	LimitBytes       *uint64 `protobuf:"varint,2,opt,name=limit_bytes" json:"limit_bytes,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CapacityRange) Reset()                    { *m = CapacityRange{} }
func (m *CapacityRange) String() string            { return proto.CompactTextString(m) }
func (*CapacityRange) ProtoMessage()               {}
func (*CapacityRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CapacityRange) GetRequiredBytes() uint64 {
	if m != nil && m.RequiredBytes != nil {
		return *m.RequiredBytes
	}
	return 0
}

func (m *CapacityRange) GetLimitBytes() uint64 {
	if m != nil && m.LimitBytes != nil {
		return *m.LimitBytes
	}
	return 0
}

// The information about a provisioned volume.
type VolumeInfo struct {
	// The capacity of the volume in bytes. This field is OPTIONAL. If not
	// set, it indicates that the capacity of the volume is unknown (e.g.,
	// NFS share). If set, it MUST be non-zero.
	CapacityBytes *uint64 `protobuf:"varint,1,opt,name=capacity_bytes" json:"capacity_bytes,omitempty"`
	// Contains information about how the volume can be accessed. This
	// field is REQUIRED.
	AccessMode *AccessMode `protobuf:"bytes,2,req,name=access_mode" json:"access_mode,omitempty"`
	// Contains identity information for the created volume. This field is
	// REQUIRED. The identity information will be used by the CO in
	// subsequent calls to refer to the provisioned volume.
	Id *VolumeID `protobuf:"bytes,4,req,name=id" json:"id,omitempty"`
	// Metadata of the created volume. This field is OPTIONAL. If set, the
	// CO SHALL pass this information along with the `id` to subsequent
	// calls.
	Metadata         *VolumeMetadata `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *VolumeInfo) Reset()                    { *m = VolumeInfo{} }
func (m *VolumeInfo) String() string            { return proto.CompactTextString(m) }
func (*VolumeInfo) ProtoMessage()               {}
func (*VolumeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VolumeInfo) GetCapacityBytes() uint64 {
	if m != nil && m.CapacityBytes != nil {
		return *m.CapacityBytes
	}
	return 0
}

func (m *VolumeInfo) GetAccessMode() *AccessMode {
	if m != nil {
		return m.AccessMode
	}
	return nil
}

func (m *VolumeInfo) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VolumeInfo) GetMetadata() *VolumeMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Specify how a volume can be accessed.
type AccessMode struct {
	// This field is REQUIRED.
	Mode             *AccessMode_Mode `protobuf:"varint,1,req,name=mode,enum=models.AccessMode_Mode" json:"mode,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *AccessMode) Reset()                    { *m = AccessMode{} }
func (m *AccessMode) String() string            { return proto.CompactTextString(m) }
func (*AccessMode) ProtoMessage()               {}
func (*AccessMode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AccessMode) GetMode() AccessMode_Mode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return AccessMode_UNKNOWN
}

// The identity of the volume.
type VolumeID struct {
	// The identity of the provisioned volume specified by the Plugin in
	// the form of key-value pairs. This field is REQUIRED. Given this
	// information will be passed around by the CO, it is RECOMMENDED that
	// each Plugin keeps this information as small as possible.
	Values           map[string]string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *VolumeID) Reset()                    { *m = VolumeID{} }
func (m *VolumeID) String() string            { return proto.CompactTextString(m) }
func (*VolumeID) ProtoMessage()               {}
func (*VolumeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VolumeID) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

// The metadata information about the volume.
type VolumeMetadata struct {
	// The metadata information about the provisioned volume specified by
	// the Plugin in the form of key-value pairs. This field is OPTIONAL.
	// This field MAY contain sensitive information. Therefore, the CO
	// MUST NOT leak this information to untrusted entities. Given this
	// information will be passed around by the CO, it is RECOMMENDED that
	// each Plugin keeps this information as small as possible.
	Values           map[string]string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *VolumeMetadata) Reset()                    { *m = VolumeMetadata{} }
func (m *VolumeMetadata) String() string            { return proto.CompactTextString(m) }
func (*VolumeMetadata) ProtoMessage()               {}
func (*VolumeMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VolumeMetadata) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Version struct {
	Major            *uint32 `protobuf:"varint,1,req,name=major" json:"major,omitempty"`
	Minor            *uint32 `protobuf:"varint,2,req,name=minor" json:"minor,omitempty"`
	Patch            *uint32 `protobuf:"varint,3,req,name=patch" json:"patch,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Version) GetMajor() uint32 {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return 0
}

func (m *Version) GetMinor() uint32 {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return 0
}

func (m *Version) GetPatch() uint32 {
	if m != nil && m.Patch != nil {
		return *m.Patch
	}
	return 0
}

type Error struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*CreateVolumeRequest)(nil), "models.CreateVolumeRequest")
	proto.RegisterType((*CreateVolumeResponse)(nil), "models.CreateVolumeResponse")
	proto.RegisterType((*CreateVolumeResponse_Result)(nil), "models.CreateVolumeResponse.Result")
	proto.RegisterType((*DeleteVolumeRequest)(nil), "models.DeleteVolumeRequest")
	proto.RegisterType((*DeleteVolumeResponse)(nil), "models.DeleteVolumeResponse")
	proto.RegisterType((*DeleteVolumeResponse_Result)(nil), "models.DeleteVolumeResponse.Result")
	proto.RegisterType((*VolumeCapability)(nil), "models.VolumeCapability")
	proto.RegisterType((*VolumeCapability_BlockVolume)(nil), "models.VolumeCapability.BlockVolume")
	proto.RegisterType((*VolumeCapability_MountVolume)(nil), "models.VolumeCapability.MountVolume")
	proto.RegisterType((*CapacityRange)(nil), "models.CapacityRange")
	proto.RegisterType((*VolumeInfo)(nil), "models.VolumeInfo")
	proto.RegisterType((*AccessMode)(nil), "models.AccessMode")
	proto.RegisterType((*VolumeID)(nil), "models.VolumeID")
	proto.RegisterType((*VolumeMetadata)(nil), "models.VolumeMetadata")
	proto.RegisterType((*Version)(nil), "models.Version")
	proto.RegisterType((*Error)(nil), "models.Error")
	proto.RegisterEnum("models.AccessMode_Mode", AccessMode_Mode_name, AccessMode_Mode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	out := new(CreateVolumeResponse)
	err := grpc.Invoke(ctx, "/models.Controller/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	out := new(DeleteVolumeResponse)
	err := grpc.Invoke(ctx, "/models.Controller/DeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Controller/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Controller/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Controller_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Controller_DeleteVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csi-local-volume-release.proto",
}

func init() { proto.RegisterFile("csi-local-volume-release.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x29, 0xd2, 0xb2, 0x86, 0x91, 0x2d, 0xac, 0x53, 0x87, 0x50, 0x8c, 0x40, 0x60, 0x5a,
	0x84, 0x40, 0x2b, 0x1a, 0x61, 0x91, 0xa2, 0x28, 0x0a, 0x14, 0x89, 0x2d, 0xd4, 0x42, 0x2c, 0xb9,
	0x50, 0x13, 0x07, 0x3d, 0x11, 0x2b, 0x6a, 0xa5, 0xb0, 0x21, 0xb9, 0xca, 0xee, 0xd2, 0x80, 0x6e,
	0x7d, 0x81, 0x1e, 0x7b, 0xce, 0xad, 0x40, 0x1f, 0xa6, 0xc7, 0xbe, 0x4f, 0xb1, 0x4b, 0x4a, 0xa2,
	0x7e, 0xec, 0xb4, 0xc8, 0x45, 0xd0, 0xcc, 0x7c, 0xf3, 0x7d, 0x9c, 0x9f, 0x1d, 0x78, 0x14, 0xf2,
	0xa8, 0x13, 0xd3, 0x10, 0xc7, 0x9d, 0x1b, 0x1a, 0x67, 0x09, 0xe9, 0x30, 0x12, 0x13, 0xcc, 0x89,
	0x37, 0x63, 0x54, 0x50, 0xb4, 0x97, 0xd0, 0x31, 0x89, 0x79, 0xab, 0x33, 0x8d, 0xc4, 0xdb, 0x6c,
	0xe4, 0x85, 0x34, 0x39, 0x9d, 0xd2, 0x29, 0x3d, 0x55, 0xe1, 0x51, 0x36, 0x51, 0x96, 0x32, 0xd4,
	0xbf, 0x3c, 0xcd, 0xf9, 0xa0, 0xc3, 0xd1, 0x19, 0x23, 0x58, 0x90, 0x6b, 0xc5, 0x3a, 0x24, 0xef,
	0x33, 0xc2, 0x05, 0x6a, 0x43, 0xed, 0x86, 0x30, 0x1e, 0xd1, 0xd4, 0xd6, 0xda, 0xba, 0x6b, 0xf9,
	0x87, 0x5e, 0x2e, 0xe0, 0x5d, 0xe7, 0x6e, 0x74, 0x0f, 0x8c, 0x14, 0x27, 0xc4, 0xd6, 0xdb, 0xba,
	0x5b, 0x47, 0x1d, 0x38, 0x08, 0xf1, 0x0c, 0x87, 0x91, 0x98, 0x07, 0x0c, 0xa7, 0x53, 0x62, 0x57,
	0xdb, 0x9a, 0x6b, 0xf9, 0x9f, 0x2d, 0xd2, 0xce, 0x8a, 0xe8, 0x50, 0x06, 0xd1, 0x33, 0x38, 0xca,
	0xab, 0x08, 0x64, 0xd6, 0x28, 0x8a, 0x23, 0x11, 0x11, 0x6e, 0x1b, 0xed, 0xaa, 0x6b, 0xf9, 0xf6,
	0x52, 0x4a, 0x41, 0xce, 0x16, 0x88, 0x39, 0xfa, 0x01, 0x60, 0x86, 0x19, 0x4e, 0x88, 0x20, 0x8c,
	0xdb, 0xa6, 0x42, 0x7f, 0xb9, 0x54, 0xd8, 0x2e, 0xc3, 0xfb, 0x69, 0x89, 0xee, 0xa6, 0x82, 0xcd,
	0x5b, 0x4f, 0xe1, 0x70, 0xc3, 0x85, 0x2c, 0xa8, 0xbe, 0x23, 0x73, 0x5b, 0x6b, 0x6b, 0x6e, 0x1d,
	0x35, 0xc0, 0xbc, 0xc1, 0x71, 0x26, 0xab, 0xd2, 0xdc, 0xfa, 0x77, 0xfa, 0xb7, 0x9a, 0xf3, 0x97,
	0x06, 0xf7, 0xd7, 0xa9, 0xf9, 0x8c, 0xa6, 0x5c, 0xd6, 0xb0, 0xc7, 0x08, 0xcf, 0x62, 0xa1, 0x72,
	0x2d, 0xff, 0xf1, 0xee, 0x0f, 0xc9, 0xd1, 0xde, 0x50, 0x41, 0x2f, 0x2a, 0xe8, 0x11, 0x98, 0x84,
	0x31, 0xca, 0x94, 0x84, 0xe5, 0x37, 0x16, 0x59, 0x5d, 0xe9, 0xbc, 0xa8, 0xb4, 0x9e, 0xc2, 0x5e,
	0x8e, 0x45, 0x4f, 0xc0, 0x2a, 0x9a, 0x14, 0xa5, 0x13, 0x5a, 0xcc, 0x01, 0xad, 0x37, 0xa7, 0x97,
	0x4e, 0xe8, 0x8b, 0x1a, 0x98, 0x8c, 0xcc, 0xe2, 0xb9, 0xf3, 0xbb, 0x06, 0x47, 0xe7, 0x24, 0x26,
	0xff, 0x7f, 0x9a, 0x8f, 0xa1, 0xbe, 0xd0, 0x1a, 0xab, 0x91, 0x5a, 0x7e, 0x73, 0x43, 0xe9, 0x1c,
	0x9d, 0xc2, 0x61, 0x01, 0x4a, 0x88, 0xc0, 0x63, 0x2c, 0x70, 0x31, 0xe5, 0xe3, 0x75, 0x68, 0xbf,
	0x88, 0x3a, 0xbf, 0x69, 0x70, 0x7f, 0xfd, 0x7b, 0x3e, 0xd6, 0xbb, 0x5d, 0xe8, 0xff, 0xde, 0xbb,
	0xfd, 0x45, 0xef, 0x56, 0x2d, 0xf9, 0x5b, 0x83, 0xe6, 0xd6, 0x1e, 0x3d, 0x03, 0x73, 0x14, 0xd3,
	0xf0, 0x5d, 0xa1, 0xfe, 0xf9, 0x6d, 0x0b, 0xe7, 0xbd, 0x90, 0xa8, 0xdc, 0x7b, 0x51, 0x91, 0x69,
	0x09, 0xcd, 0x52, 0x51, 0xc8, 0xdf, 0x9e, 0xd6, 0x97, 0xa8, 0x45, 0x5a, 0xab, 0x01, 0x56, 0x89,
	0xa7, 0xf5, 0x35, 0x58, 0xa5, 0x38, 0x3a, 0x84, 0xda, 0x84, 0x07, 0x62, 0x3e, 0x23, 0xc5, 0x0e,
	0x1e, 0x81, 0xa5, 0x54, 0x82, 0x49, 0x8c, 0xa7, 0xdc, 0xd6, 0xdb, 0x55, 0xb7, 0x2e, 0xeb, 0x51,
	0x8b, 0xe9, 0x7c, 0x0f, 0x8d, 0xf5, 0xa7, 0x74, 0x0c, 0x07, 0x8c, 0xbc, 0xcf, 0x22, 0x46, 0xc6,
	0xc1, 0x68, 0x2e, 0x08, 0x57, 0x34, 0x86, 0xa4, 0x89, 0xa3, 0x24, 0x12, 0x85, 0x53, 0x7e, 0xb2,
	0xe1, 0xfc, 0xa1, 0x01, 0xac, 0x16, 0x47, 0xe6, 0x2e, 0x5f, 0x6d, 0x39, 0xf7, 0x09, 0x58, 0x38,
	0x0c, 0x09, 0xe7, 0x81, 0xac, 0xb0, 0xd8, 0x87, 0xe5, 0xe6, 0x3d, 0x57, 0xa1, 0x3e, 0x1d, 0x13,
	0x74, 0x02, 0x7a, 0x34, 0xb6, 0x8d, 0x5b, 0xf6, 0xc5, 0x85, 0xfd, 0xe5, 0xa2, 0x98, 0x77, 0x2e,
	0xca, 0x3f, 0x1a, 0x40, 0x89, 0xf6, 0x0b, 0x30, 0x94, 0xb0, 0x5c, 0xd6, 0x03, 0xff, 0xc1, 0xb6,
	0xb0, 0x27, 0x7f, 0x9c, 0x0f, 0x1a, 0x18, 0x0a, 0x6f, 0x41, 0xed, 0xf5, 0xe0, 0xe5, 0xe0, 0xea,
	0xcd, 0xa0, 0x59, 0x41, 0xc7, 0x80, 0x7e, 0xee, 0x0d, 0x7e, 0xbc, 0xec, 0x06, 0x83, 0xab, 0xf3,
	0x6e, 0xf0, 0x66, 0xd8, 0x7b, 0xd5, 0x1d, 0x36, 0x35, 0xf4, 0x10, 0x1e, 0x94, 0xfd, 0xc3, 0xee,
	0xf3, 0xf3, 0xee, 0x30, 0xb8, 0x1a, 0x5c, 0xfe, 0xd2, 0xd4, 0x51, 0x0b, 0x8e, 0xfb, 0xaf, 0x2f,
	0x5f, 0xf5, 0xb6, 0x63, 0x55, 0x74, 0x02, 0x76, 0x29, 0x56, 0x70, 0x14, 0xb4, 0x86, 0xa4, 0x2d,
	0x45, 0xf3, 0xbf, 0x45, 0xd0, 0x74, 0xa6, 0xb0, 0xbf, 0xec, 0xc6, 0x57, 0xb0, 0xa7, 0x46, 0x28,
	0x9b, 0x2c, 0x0f, 0xd7, 0xc9, 0x66, 0xbf, 0xbc, 0x6b, 0x15, 0xce, 0x2f, 0x55, 0x07, 0xac, 0x92,
	0xf9, 0xd1, 0x2b, 0xc5, 0xe1, 0x60, 0xbd, 0xa5, 0xc8, 0xdf, 0x90, 0x73, 0x76, 0xb7, 0xfe, 0x53,
	0x44, 0xbf, 0x81, 0xda, 0xe2, 0x7e, 0x34, 0xc0, 0x4c, 0xf0, 0xaf, 0x94, 0xa9, 0x91, 0x35, 0x94,
	0x19, 0xa5, 0xea, 0xa1, 0x16, 0xe6, 0x0c, 0x8b, 0xf0, 0xad, 0x5d, 0x95, 0xa6, 0x53, 0x03, 0x53,
	0xbd, 0x58, 0xff, 0x4f, 0x0d, 0xe0, 0x8c, 0xa6, 0x82, 0xd1, 0x38, 0x26, 0x0c, 0xbd, 0x84, 0x7b,
	0xe5, 0xdb, 0x89, 0x1e, 0xde, 0x71, 0xda, 0x5b, 0x27, 0x77, 0x9d, 0x5b, 0xa7, 0x22, 0xc9, 0xca,
	0xc7, 0x64, 0x45, 0xb6, 0xe3, 0x40, 0xae, 0xc8, 0x76, 0xdd, 0x1f, 0xa7, 0xf2, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x90, 0xb8, 0xd6, 0x36, 0x7e, 0x07, 0x00, 0x00,
}
