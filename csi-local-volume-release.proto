syntax = "proto2";

package models;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";


service Controller {
    rpc CreateVolume (CreateVolumeRequest)
    returns (CreateVolumeResponse) {}

    rpc DeleteVolume (DeleteVolumeRequest)
    returns (DeleteVolumeResponse) {}
}

message CreateVolumeRequest {
    // The API version assumed by the CO. This field is REQUIRED.
    required Version version = 1;

    // The suggested name for the storage space. This field is REQUIRED.
    // It serves two purposes:
    // 1) Idempotency - This name is generated by the CO to achieve
    //    idempotency. If `CreateVolume` fails, the volume may or may not
    //    be provisioned. In this case, the CO may call `CreateVolume`
    //    again, with the same name, to ensure the volume exists. The
    //    Plugin should ensure that multiple `CreateVolume` calls for the
    //    same name do not result in more than one piece of storage
    //    provisioned corresponding to that name. If a Plugin is unable to
    //    enforce idempotency, the COâ€™s error recovery logic could result
    //    in multiple (unused) volumes being provisioned.
    // 2) Suggested name - Some storage systems allow callers to specify
    //    an identifier by which to refer to the newly provisioned
    //    storage. If a storage system supports this, it can optionally
    //    use this name as the identifier for the new volume.
    required string name = 2;

    // This field is OPTIONAL. This allows the CO to specify the capacity
    // requirement of the volume to be provisioned. If not specified, the
    // Plugin MAY choose an implementation-defined capacity range.
    optional CapacityRange capacity_range = 3;

    // The capabilities that the provisioned volume MUST have: the Plugin
    // MUST provision a volume that could satisfy ANY ONE of the
    // capabilities specified in this list. The Plugin MUST assume that
    // the CO MAY use the  provisioned volume later with ANY of the
    // capabilities specified in this list. This also enables the CO to do
    // early validation: if ANY of the specified volume capabilities are
    // not supported by the Plugin, the call SHALL fail. This field is
    // REQUIRED.
    repeated VolumeCapability volume_capabilities = 4;

    // Plugin specific parameters passed in as opaque key-value pairs.
    // This field is OPTIONAL. The Plugin is responsible for parsing and
    // validating these parameters. COs will treat these as opaque.
    map<string, string> parameters = 5;
}

message CreateVolumeResponse {
    message Result {
        // Contains all attributes of the newly created volume that are
        // relevant to the CO along with information required by the Plugin
        // to uniquely identifying the volume. This field is REQUIRED.
        required VolumeInfo volume_info = 1;
    }

    // One of the following fields MUST be specified.
    oneof reply {
        Result result = 1;
        Error error = 2;
    }
}

message DeleteVolumeRequest {
    // The API version assumed by the CO. This field is REQUIRED.
    required Version version = 1;

    // The ID of the volume to be deprovisioned. This field is REQUIRED.
    required VolumeID volume_id = 2;

    // The metadata of the volume to be deprovisioned. This field is
    // OPTIONAL.
    optional VolumeMetadata volume_metadata = 3;
}

message DeleteVolumeResponse {
    message Result {}

    // One of the following fields MUST be specified.
    oneof reply {
        Result result = 1;
        Error error = 2;
    }
}

// Specify a capability of a volume.
message VolumeCapability {
    message BlockVolume {
        // Intentionally empty, for now.
    }
    message MountVolume {
        // The filesystem type. This field is OPTIONAL.
        optional string fs_type = 1;

        // The mount options that can be used for the volume. This field is
        // OPTIONAL. `mount_flags` MAY contain sensitive information.
        // Therefore, the CO and the Plugin MUST NOT leak this information
        // to untrusted entities.
        repeated string mount_flags = 2;
    }

    // One of the following fields MUST be specified.
    oneof value {
        BlockVolume block = 1;
        MountVolume mount = 2;
    }
}

// The capacity of the storage space in bytes. To specify an exact size,
// `required_bytes` and `limit_bytes` can be set to the same value. At
// least one of the these fields MUST be specified.
message CapacityRange {
    // Volume must be at least this big.
    optional uint64 required_bytes = 1;

    // Volume must not be bigger than this.
    optional uint64 limit_bytes = 2;
}

// The information about a provisioned volume.
message VolumeInfo {
    // The capacity of the volume in bytes. This field is OPTIONAL. If not
    // set, it indicates that the capacity of the volume is unknown (e.g.,
    // NFS share). If set, it MUST be non-zero.
    optional uint64 capacity_bytes = 1;

    // Contains information about how the volume can be accessed. This
    // field is REQUIRED.
    required AccessMode access_mode = 2;

    // Contains identity information for the created volume. This field is
    // REQUIRED. The identity information will be used by the CO in
    // subsequent calls to refer to the provisioned volume.
    required VolumeID id = 4;

    // Metadata of the created volume. This field is OPTIONAL. If set, the
    // CO SHALL pass this information along with the `id` to subsequent
    // calls.
    optional VolumeMetadata metadata = 5;
}

// Specify how a volume can be accessed.
message AccessMode {
    enum Mode {
        UNKNOWN = 0;

        // Can be published as read/write at one node at a time.
        SINGLE_NODE_WRITER = 1;

        // Can be published as readonly at one node at a time.
        SINGLE_NODE_READER_ONLY = 2;

        // Can be published as readonly at multiple nodes simultaneously.
        MULTI_NODE_READER_ONLY = 3;

        // Can be published at multiple nodes simultaneously. Only one of
        // the node can be used as read/write. The rest will be readonly.
        MULTI_NODE_SINGLE_WRITER = 4;

        // Can be published as read/write at multiple nodes simultaneously.
        MULTI_NODE_MULTI_WRITER = 5;
    }

    // This field is REQUIRED.
    required Mode mode = 1;
}

// The identity of the volume.
message VolumeID {
    // The identity of the provisioned volume specified by the Plugin in
    // the form of key-value pairs. This field is REQUIRED. Given this
    // information will be passed around by the CO, it is RECOMMENDED that
    // each Plugin keeps this information as small as possible.
    map<string, string> values = 1;
}

// The metadata information about the volume.
message VolumeMetadata {
    // The metadata information about the provisioned volume specified by
    // the Plugin in the form of key-value pairs. This field is OPTIONAL.
    // This field MAY contain sensitive information. Therefore, the CO
    // MUST NOT leak this information to untrusted entities. Given this
    // information will be passed around by the CO, it is RECOMMENDED that
    // each Plugin keeps this information as small as possible.
    map<string, string> values = 1;
}

message Version{
    required uint32 major = 1;  // This field is REQUIRED.
    required uint32 minor = 2;  // This field is REQUIRED.
    required uint32 patch = 3;  // This field is REQUIRED.
}

message Error {
    //Error Class
}